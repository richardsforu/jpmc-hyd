JAVA SE Notes
-------------------
Java SE - 12
JAVA SE 8
    1. Non GUI Part
    2. GUI Part 
        -> awt
        -> swings

Non GUI 
---------
1. OOPS
-> class
-> object
-> Encapulation
    -> public, default, private
    -> packages
    -> POJO classes
    -> Model/Bean/Entity
    -> Plain old java object
    -> Plain old Java interface 
-> Inheritance
-> Abstraction
    -> abstract classes
-> Poly morphism
    -> interfaces
---------------------
60%

2. java.lang package
-----------------------
-> java.lang.Object
-> String, StringBuffer
-> Wraper classes   
    -> Integer - int
    -> Double  - double
    -> Short
    -> Byte
    -> Float
    -> Double
    -> Character
    -> Boolean
-> Garbage Collection
    -> finalize
-> Exception Handling
        -> Checked
        -> Un Checked
-> Threads
        -> Single
        -> Multi Thread
        -> Thread Concurency
---------------
80%

3. Java API
    1. java.io
        -> File Operations
    2. java.util
        -> Collection API
        -> Data structores
----------------
100%


Naming Convensions
-------------------------
class
--------
-> Every class name in java
   should starts with upper
   case letter. If there are
   more than one word in the 
   class name, then each word
   first letter should be
   capitalized
Ex: Test, Employee,
    ContractEmployee
    DataInputStreamReader etc
2. methods/variables/objects
------------------------------
-> every method/variable/object
   in java should starts with 
   lower case letter. If there
   are more than one word in the
   name, then each word first
   letter should be capitalized
Ex: display(),printPaySlip(),
    empName, name, 

3. Const
--------
-> All cont in java shoud be in
   upper case letters only
Ex: PI, MAX_AGE, FONT_NAME etc
4. keywords/packages
----------------------
All keywords and package names
in java should be in lowercase
letters
Ex: java.lang, int, for, if,com


Class relationships
---------------------
1. Is 'A' 
2. Has 'A'

1. Is 'A'
------------
class A{

}
class B extends A{
// B is sub class of A
}

2. Has 'A'
-----------
class A{

}

class B{
 A a=new A();  
 // B has A's object

}

Inheritance 
——————————
-> Reusability of code

1. Single 
2. Multiple


Single
————
Class A { }
Class B extends A{ }

  A
B C D

Class D extends A,B,C

Abstract classes
———————————
-> Abstract class in a method specification which contains zero or more abstract methods and concrete methods

-> All the sub classes of an abstract class must over all the 
    Abstract methods defined with in the abstract class.
-> If any sub class is not villing to override any one of the
    Abstract methods defined with in abstract class, then that
   Sub class must be defined as ‘abstract’

-> We can not create an object to the abstract class 
-> But we can create reference of a abstract 
    Class
-> Super class reference can store all its sub    class objects

-> The reference of a super class can access 
    All the methods with in super class and 
    All over ridden methods of a sub class
-> The reference of a super class can not 
   Access the methods which are defined only 
   With in the sub classes (non over ridden methods )

Interfaces in Java
--------------------------

Abstract classes issues
-------------------------
-> Does not support 100% abstraction
-> Does not support extensibility 

Interfaces
-------------
-> An interface is a method specification which 
   Contains only zero or more abstract methods
-> by default any property defined in the interface is public static and final
-> by default every method in the interface is 
   public and abstract 
-> We cannot create object to an interface.
-> but we can create a freebee variable to it.
-> Interface reference can hold all its sub class  objects

Notes
------
1. Interface can extends to another interface
2. Interface can extends more than one interface
3. Class can implements interface
4. Class can implements more than one interface
5. Interface can not implements another interface
6. Class can not implements another class
7. Class can not extends interface
8. Class can extends only to another class
9. Class can not extends more than one class

























































